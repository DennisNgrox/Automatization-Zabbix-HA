---

- name: Commands All - firewall, selinux
  hosts: all
  ansible.builtin.shell:
    cmd: "{{ item }}"
  loop:
    - systemctl disable firewalld
    - systemctl stop firewalld
    - setenforce 0

- name: Instaling Zabbix
  hosts: zabbix-server
  tasks:
    - name: Wget Repository Zabbix
      ansible.builtin.get_url:
        url: https://repo.zabbix.com/zabbix/6.0/rhel/8/x86_64/zabbisx-release-6.0-4.el8.noarch.rpm
        dest: /home/ansible/
        mode: '0777'

    - name: Install .rpm package
      ansible.builtin.yum:
        name: https://repo.zabbix.com/zabbix/6.0/rhel/8/x86_64/zabbix-release-6.0-4.el8.noarch.rpm
        state: present 

    - name: Install Components Zabbbix
      yum:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
        - zabbix-server-mysql
        - zabbix-sql-scripts 
        - zabbix-agent
        - zabbix-selinux-policy
        - haproxy
    
    - name: create archive haproxy
      ansible.builtin.file:
        path: /etc/haproxy/haproxy.cfg
        state: touch 

    - name: Creating a file with content
      copy:
        dest: "/etc/haproxy/haproxy.cfg"
        content: |
          global
              log /dev/log local0 info
              log /dev/log local0 notice
              user haproxy
              maxconn 4096
              group haproxy

          defaults
              log global
              retries 2
              timeout connect 10m
              timeout server 10m
              timeout client 10m
              option redispatch
              option forceclose

          listen mysql-cluster
          bind 127.0.0.1:3306
          option tcplog
          mode tcp
          balance roundrobin
          server mysql-master {{ db_host1 }}:3306 check agent-check agent-port 1234 inter 10s fall 6 rise 6 on-marked-down shutdown-sessions on-marked-up shutdown-backup-sessions
          server mysql-slave {{ db_hos2 }}:3306 check inter 10s fall 6 rise 6 backup

          listen stats
              bind *:8909 
              mode http
              stats enable 
              stats uri /stats
              stats realm HAProxy\ Statistics
              stats auth admin:admin

- name: MySQL -- Install <ambos os hosts>
  hosts: server-bancos
  vars_files: "/archives/vars.yaml"
  vars:
    user: "{{ user }}"
    password: "{{ password }}"
    db_host1: "{{ db_host1 }}"
    db_host2: "{{ db_host2 }}"
  tasks:
    - name: Install Component DB - Mysql - Install
      yum:
        name: mysql-server
        state: latest

    - name: start service MySQL
      service:
        name: mysqld
        state: started
        enabled: true

    - name: Create a new database with name 'zabbix'
      community.mysql.mysql_db:
        name: zabbix
        state: present
        encoding: utf8mb4

    - name: Create database user with name '{{ user }}' and password '{{ password }}' with replication database privileges - {{ db_host1 }}
      community.mysql.mysql_user:
        name: "{{ user }}"
        password: "{{ password }}"
        host: "{{ db_host2 }}"
        priv: '*.*:SUPER,REPLICATION CLIENT'
        state: present

    - name: Create database user with name 'zabbix' and password '{{ password }}' with ALL database privileges
      community.mysql.mysql_user:
        name: zabbix
        password: "{{ password }}"
        host: "{{ db_host1 }}"
        priv: '*.*:ALL'
        state: present

    - name: log_bin_trust_function_creators
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - mysql -u root --execute="set global log_bin_trust_function_creators = 1;"

- name: Copy file my.cnf {{ db_host1 }} and install MySQL lag
  vars_files: "/archives/vars.yaml"
  hosts: "{{ db_host1 }}"
  vars:
    db_host: "{{ db_host1 }}"
    server-id: 1
  tasks:
    - name: Copy file with owner and permissions bind-address, server-id, log_bin
      ansible.builtin.copy:
        src: /home/dennis/my.cnf
        dest: /etc/my.cnf
        owner: root
        group: root
        mode: '0544'
    
    - name: install php
      yum:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - php
          - php-mysqlnd
    
    - name: add content in mysql-lag.php -- edit user and password
      ansible.builtin.copy:
        src: /home/dennis/mysql-lag.php
        dest: /etc/zabbix/scripts/mysql-lag.php
        owner: root
        group: root
        mode: '0555'

    - name: create archive /lib/systemd/system/mysql-lag.service
      ansible.builtin.file:
        path: /lib/systemd/system/mysql-lag.service
        state: touch

    - name: content in /lib/systemd/system/mysql-lag.service
      ansible.builtin.copy:
        dest: /lib/systemd/system/mysql-lag.service
        content: |
          [Unit]
          Description=Servico para checar o sincronismo do banco de dados utilizado pelo HAproxy
          After=network.target

          [Service]
          Type=simple
          EnvironmentFile=/etc/default/mysql-lag
          ExecStart=/usr/bin/php /etc/zabbix/scripts/mysql-lag.php "$SET_ACTIVE_NODE"
          Restart=always
          TimeoutStartSec=0

          [Install]
          WantedBy=default.target

    - name: create archive for ambient variable
      ansible.builtin.file:
        path: /etc/default/mysql-lag
        state: touch

    - name: content in /etc/default/mysql-lag
      ansible.builtin.copy:
        dest: /etc/default/mysql-lag
        content: |
          # Fixa node 01 como ativo
          #SET_ACTIVE_NODE="node01" 

          # Fixa node 02 como ativo
          #SET_ACTIVE_NODE="node02" 

          # Qualquer outro valor vai ser realizado a checagem
          SET_ACTIVE_NODE="check"

    - name: enable and start service mysql-lag.php
      service:
        name: mysql-lag
        state: started
        enabled: true

- name: Copy file my.cnf {{ db_host2 }}
  vars_files: "/archives/vars.yaml"
  hosts: "{{ db_host2 }}"
  vars:
    db_host: "{{ db_host2 }}"
    server-id: 2
  tasks:
    - name: Copy file with owner and permissions bind-address, server-id, log_bin
      ansible.builtin.copy:
        src: /home/dennis/my.cnf
        dest: /etc/my.cnf
        owner: root
        group: root
        mode: '0544'

- name: Configuring Slave-server to replicate from Master-server - Master - {{ db_host1 }}
  hosts: db_host2
  vars:
    user: "{{ user }}"
    password: "{{ password }}"
    db_host1: "{{ db_host1 }}"
    db_host2: "{{ db_host2 }}"
  tasks:
    - name: stop threads replication
      mysql_replication:
        login_host: "{{ db_host2 }}"
        login_user: "root"
        mode: stopreplica
  
    - name: get replication primary
      mysql_replication:
        login_host: "{{ db_host1 }}"
        login_user: "root"
        mode: getprimary
      register: mysql_repli_host1

    - name: get log position for master status
      debug:
        var: mysql_repli_host1.Position

    - name: Configuring Slave-server to replicate from Master-server
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - mysql -u root --execute="CHANGE REPLICATION SOURCE TO SOURCE_HOST='{{ db_host1 }}', SOURCE_USER='{{ user }}', SOURCE_PORT=3306, SOURCE_PASSWORD='{{ password }}', SOURCE_LOG_FILE='{{ mysql_repli_host1.File }}', SOURCE_LOG_POS='{{ mysql_repli_host1.Position }}', SOURCE_SSL=1;"

    - name: start threads replication
      mysql_replication:
        login_host: "{{ db_host2 }}"
        login_user: "root"
        mode: startreplica

- name: Configuring Master-server to replicate from Master-server - Master - {{ db_host2 }}
  hosts: "{{ db_host2 }}"
  vars:
    user: "{{ user }}"
    password: "{{ password }}"
    db_host1: "{{ db_host1 }}"
    db_host2: "{{ db_host2 }}"
  tasks:
    - name: Create database user with name '{{ user }}' and password '{{ password }}' with replication database privileges - {{ db_host2 }}
      community.mysql.mysql_user:
        name: "{{ user }}"
        password: "{{ password }}"
        host: "{{ db_host1 }}"
        priv: '*.*:SUPER,REPLICATION CLIENT'
        state: present
  
- name: Configuring Master-server to replicate from Master-server - {{ db_host1 }}
  hosts: "{{ db_host2 }}"
  vars:
    user: "{{ user }}"
    password: "{{ password }}"
    db_host1: "{{ db_host1 }}"
    db_host2: "{{ db_host2 }}"
  tasks:
    - name: get replication primary
      mysql_replication:
        login_host: "{{ db_host2 }}"
        login_user: "root"
        mode: getprimary
      register: mysql_repli_host2

    - name: get log position for master status
      debug:
        var: mysql_repli_host2.Position

    - name: Configuring Slave-server to replicate from Master-server
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - mysql -u root --execute="CHANGE REPLICATION SOURCE TO SOURCE_HOST='{{ db_host2 }}', SOURCE_USER='{{ user }}', SOURCE_PORT=3306, SOURCE_PASSWORD='{{ password }}', SOURCE_LOG_FILE='{{ mysql_repli_host2.File }}', SOURCE_LOG_POS='{{ mysql_repli_host2.Position }}', SOURCE_SSL=1;"

    - name: start replication
      mysql_replication:
        login_host: "{{ db_host2 }}"
        login_user: "root"
        mode: startreplica

- name: Configurações Zabbix server node 1 - alteração do arquivo de configuração e criação do schema no Banco
  hosts: "{{ zabbix_server1 }}"
  vars_files: "/archives/vars.yaml"
  vars:
    zabbix_server1: "{{ zabbix_server1 }}"
    password: "{{ password }}"
    banco1: "{{ db_host1 }}"
    banco2: "{{ db_host2 }}"
  tasks:
    - name: Configurações Zabbix
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - sed -i s'/# DBPassword=/DBPassword={{ password }}/' /etc/zabbix/zabbix_server.conf
        - sed -i s'/# DBHost=localhost/DBHost=127.0.0.1/' /etc/zabbix/zabbix_server.conf
        - sed -i s'/# HANodeName=/HANodeName=zbx_node1/' /etc/zabbix/zabbix_server.conf
        - sed -i s'/# NodeAddress=localhost:1005/NodeAddress={{ zabbix_server1 }}:10051/' /etc/zabbix/zabbix_server.conf  
        - zcat /usr/share/zabbix-sql-scripts/mysql/server.sql.gz | mysql --default-character-set=utf8mb4 -h {{ db_host1 }} -uzabbix -p'{{ password }}' zabbix
        - mysql -u root --execute="set global log_bin_trust_function_creators = 0;"

    - name: start service loop
      service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - zabbix-agent
        - zabbix-server

- name: Configurações Zabbix server node 2 - alteração do arquivo de configuração
  hosts: "{{ zabbix_server2 }}"
  vars_files: "/archives/vars.yaml"
  vars:
    zabbix_server2: "{{ zabbix_server2 }}"
    password: "{{ password }}"
    banco1: "{{ db_host1 }}"
    banco2: "{{ db_host2 }}"
  tasks:
    - name: Configurações Zabbix
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - sed -i s'/# DBPassword=/DBPassword={{ password }}/' /etc/zabbix/zabbix_server.conf
        - sed -i s'/# DBHost=localhost/DBHost=127.0.0.1/' /etc/zabbix/zabbix_server.conf
        - sed -i s'/# HANodeName=/HANodeName=zbx_node2/' /etc/zabbix/zabbix_server.conf
        - sed -i s'/# NodeAddress=localhost:1005/NodeAddress={{ zabbix_server2 }}:10051/' /etc/zabbix/zabbix_server.conf  

    - name: start service loop
      service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop:
        - zabbix-agent
        - zabbix-server

- name: Install and Configure php-fpm nginx zabbix-web
  hosts: "{{ web_host }}"
  vars_files: "/archives/vars.yaml"
  vars: 
    web_host: "{{ web_host }}"
  tasks:  
    - name: Wget Repository Zabbix
      ansible.builtin.get_url:
        url: https://repo.zabbix.com/zabbix/6.0/rhel/8/x86_64/zabbisx-release-6.0-4.el8.noarch.rpm
        dest: /home/ansible/
        mode: '0777'

    - name: Install .rpm package
      ansible.builtin.yum:
        name: https://repo.zabbix.com/zabbix/6.0/rhel/8/x86_64/zabbix-release-6.0-4.el8.noarch.rpm
        state: present 

    - name: Install Components Zabbbix
      yum:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
        - zabbix-web-mysql
        - zabbix-nginx-conf
        - zabbix-agent

    - name: Configurations nginx
      ansible.builtin.shell:
        cmd: "{{ item }}"
      loop:
        - sed -i s'/#        listen          8080;/        listen          80;/' /etc/nginx/conf.d/zabbix.conf
        - sed -i s'/#        server_name     example.com;/        server_name     {{ web_host }};/' /etc/nginx/conf.d/zabbix.conf

    - name: enable and start services
      service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop: 
        - nginx
        - php-fpm
        - zabbix-agent

- name: Enable and start services haproxy
  hosts: zabbix-server
  tasks:
    - name: enable and start services
      service:
        name: "{{ item }}"
        state: started
        enabled: true
      loop: 
        - haproxy
        




